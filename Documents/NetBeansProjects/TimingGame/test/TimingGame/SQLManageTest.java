/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TimingGame;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author droib
 */
public class SQLManageTest {
    
    public SQLManageTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of setupDBase method, of class SQLManage.
     */
    @Test
    public void testSetupDBase() {
        String url = "jdbc:sqlite:C:/sqlite/forTGameTest/" ;
        System.out.println("setupDBase");
        SQLManage.setupDBase();
        // TODO review the generated test code and remove the default call to fail.
        try (Connection conn = DriverManager.getConnection(url)){
            if (conn != null){
                assert true;
            } else
                assert false;
        } catch (SQLException e){
            System.out.println(e.getMessage());
        }
    }

    /**
     * Test of connectToDB method, of class SQLManage.
     */
    @Test
    public void testConnectToDB() {
        System.out.println("connectToDB");
        SQLManage instance = new SQLManage();
        String url = "jdbc:sqlite:C:/sqlite/db/forTest.db";
        Connection connect;
        try(Connection conn = DriverManager.getConnection(url)){
            connect = DriverManager.getConnection(url);
            assert(true);
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
            assert(false);
        }
        
        // TODO review the generated test code and remove the default call to fail.
        //fail("The test case is a prototype.");
    }

    /**
     * Test of insertData method, of class SQLManage.
     */
    @Test
    public void testInsertData() {
        System.out.println("insertData");
        int score = 8999;
        SQLManage instance = new SQLManage();
        instance.insertData(score);
        String sql = "SELECT id, score "
                         + "FROM scores WHERE score = ?";
        
        try (Connection conn = instance.connectToDB();
             PreparedStatement pstmt  = conn.prepareStatement(sql)){
            // set the value
            pstmt.setDouble(1,8999);
            //
            ResultSet rs  = pstmt.executeQuery();
            
            // loop through the result set
            if (rs.next())
                assert true;
            else
                assert false;
            
        } catch (SQLException ex) {
            Logger.getLogger(SQLManageTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        // TODO review the generated test code and remove the default call to fail.
        //fail("The test case is a prototype.");
    }


    /**
     * Test of allScores method, of class SQLManage.
     */
    @Test
    public void testAllScores() {
        System.out.println("allScores");
        SQLManage instance = new SQLManage();
        //Works on the third testing, as the 8999, is then generated by that point
        String expResult = "8999, ";
        String result = instance.allScores();
        assertEquals(expResult, result);
    }

    
    
}
